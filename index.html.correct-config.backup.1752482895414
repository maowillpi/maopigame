<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>üé∞ MAO Wheel Game | MAOËΩ¨ÁõòÊ∏∏Êàè</title>
    <style>
        * { 
            margin: 0; 
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            user-select: none;
        }
        html, body {
            height: 100%;
            overflow-x: hidden;
            overflow-y: auto;
        }
        body {
            font-family: 'Arial Rounded MT Bold', 'Arial', sans-serif;
            background: linear-gradient(135deg, #4f8cff 0%, #a259ff 100%);
            min-height: 100vh;
            color: #fff;
            padding: 10px;
            padding-bottom: 60px;
        }
        .language-selector {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            display: flex;
            gap: 10px;
        }
        .lang-btn {
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.3);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 14px;
            font-weight: bold;
        }
        .lang-btn.active {
            background: rgba(255,224,102,0.3);
            border-color: #ffe066;
            color: #ffe066;
        }
        .lang-btn:hover {
            background: rgba(255,255,255,0.3);
            transform: scale(1.05);
        }
        .game-container {
            background: rgba(30, 30, 60, 0.85);
            border-radius: 24px;
            padding: 20px 15px 30px 15px;
            max-width: 400px;
            width: 100%;
            margin: 0 auto;
            box-shadow: 0 8px 32px rgba(0,0,0,0.35);
            text-align: center;
            min-height: auto;
        }
        .title {
            font-size: 2em;
            font-weight: bold;
            letter-spacing: 2px;
            margin-bottom: 8px;
            text-shadow: 0 2px 8px #0006;
        }
        .desc {
            font-size: 1em;
            margin-bottom: 18px;
            color: #ffe066;
            font-weight: bold;
            text-shadow: 0 1px 4px #0008;
        }
        .wallet-section {
            background: rgba(255,255,255,0.08);
            border-radius: 14px;
            padding: 12px 0 8px 0;
            margin-bottom: 18px;
        }
        .balance-display {
            display: flex;
            justify-content: space-around;
            margin: 10px 0 0 0;
        }
        .balance-item { min-width: 90px; }
        .balance-label { font-size: 0.9em; opacity: 0.8; }
        .balance-value { font-size: 1.2em; font-weight: bold; color: #ffe066; }
        .connect-btn {
            background: linear-gradient(90deg, #ffe066 0%, #ffb347 100%);
            color: #333;
            border: none;
            padding: 12px 32px;
            border-radius: 22px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            margin-bottom: 8px;
            transition: all 0.2s;
            touch-action: manipulation;
            -webkit-tap-highlight-color: transparent;
            min-height: 44px;
        }
        .connect-btn:hover, .connect-btn:active { 
            filter: brightness(1.1); 
            transform: scale(0.98);
        }
        .game-section { 
            margin: 18px 0 20px 0;
        }
        .token-selector {
            display: flex;
            justify-content: center;
            gap: 16px;
            margin-bottom: 15px;
        }
        .token-btn {
            background: rgba(255,255,255,0.12);
            border: 2px solid transparent;
            color: #fff;
            padding: 12px 20px;
            border-radius: 20px;
            font-size: 1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s;
            touch-action: manipulation;
            -webkit-tap-highlight-color: transparent;
            min-height: 44px;
            min-width: 100px;
        }
        .token-btn:hover, .token-btn:active {
            transform: scale(0.95);
            background: rgba(255,255,255,0.2);
        }
        .token-btn.active {
            border-color: #ffe066 !important;
            background: rgba(255,224,102,0.18) !important;
            color: #ffe066 !important;
        }
        .wheel-container {
            position: relative;
            width: 250px;
            height: 250px;
            margin: 0 auto 20px auto;
        }
        .svg-wheel {
            width: 100%; 
            height: 100%; 
            display: block;
            touch-action: none;
        }
        .wheel-pointer {
            position: absolute;
            top: -18px; 
            left: 50%; 
            transform: translateX(-50%);
            width: 0; 
            height: 0;
            border-left: 18px solid transparent;
            border-right: 18px solid transparent;
            border-bottom: 32px solid #ffe066;
            z-index: 10;
            filter: drop-shadow(0 2px 6px #0008);
            transform-origin: 50% 100%; /* ËÆæÁΩÆÊóãËΩ¨‰∏≠ÂøÉ‰∏∫ÊåáÈíàÂ∫ïÈÉ®‰∏≠ÂøÉ */
        }
        .wheel-center-btn {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%,-50%);
            width: 60px;
            height: 60px;
            background: linear-gradient(145deg,#ffe066 60%,#fffbe6 100%);
            border-radius: 50%; 
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.8em; 
            color: #a259ff; 
            font-weight: bold;
            z-index: 5;
            box-shadow: 0 0 16px #ffe06699, 0 2px 12px #0003;
            border: 3px solid #fffbe6;
        }
        .play-btn {
            background: linear-gradient(90deg, #4f8cff 0%, #a259ff 100%) !important;
            color: #fff !important; 
            border: none !important; 
            padding: 16px 40px !important;
            border-radius: 24px !important; 
            font-size: 1.2em !important; 
            font-weight: bold !important;
            cursor: pointer !important; 
            margin: 20px auto !important;
            transition: all 0.2s !important;
            box-shadow: 0 4px 16px #4f8cff44 !important;
            display: block !important;
            opacity: 1 !important;
            pointer-events: auto !important;
            visibility: visible !important;
            touch-action: manipulation !important;
            -webkit-tap-highlight-color: transparent !important;
            min-height: 50px !important;
            width: 200px !important;
            position: relative !important;
            z-index: 999 !important;
        }
        .play-btn:disabled { 
            background: #888 !important; 
            cursor: not-allowed !important; 
            opacity: 0.6 !important;
        }
        .play-btn:hover:not(:disabled), .play-btn:active:not(:disabled) { 
            filter: brightness(1.1) !important; 
            transform: translateY(-2px) scale(0.98) !important;
        }
        .result-popup {
            position: fixed; 
            top: 0; 
            left: 0; 
            width: 100vw; 
            height: 100vh;
            background: rgba(0,0,0,0.7); 
            display: flex; 
            align-items: center; 
            justify-content: center;
            z-index: 1000; 
            animation: fadeIn 0.3s;
        }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
        .result-content {
            background: #fff; 
            color: #333; 
            border-radius: 18px; 
            padding: 30px 25px 25px 25px;
            text-align: center; 
            min-width: 200px; 
            max-width: 90vw;
            box-shadow: 0 8px 32px #0005;
            animation: popIn 0.4s;
        }
        @keyframes popIn { from { transform: scale(0.8); opacity: 0; } to { transform: scale(1); opacity: 1; } }
        .result-emoji { font-size: 2.5em; margin-bottom: 10px; }
        .result-title { font-size: 1.2em; font-weight: bold; margin-bottom: 8px; }
        .result-amount { font-size: 1em; color: #a259ff; font-weight: bold; }
        .celebration { 
            position: fixed; 
            top: 0; 
            left: 0; 
            width: 100vw; 
            height: 100vh; 
            pointer-events: none; 
            z-index: 1100; 
        }
        .confetti { 
            position: absolute;
            width: 12px; 
            height: 12px; 
            border-radius: 50%;
            background: #ffe066; 
            animation: confetti-fall 2.2s linear infinite; 
        }
        @keyframes confetti-fall {
            0% { transform: translateY(-100vh) rotate(0deg); opacity: 1; }
            100% { transform: translateY(100vh) rotate(720deg); opacity: 0; }
        }
        
        /* ÁßªÂä®Á´Ø‰∏ìÁî®Ê†∑Âºè */
        @media (max-width: 500px) {
            body {
                padding: 5px;
                padding-bottom: 80px;
            }
            .game-container { 
                padding: 15px 10px 40px 10px;
                width: 98vw;
                margin: 5px auto;
            }
            .title {
                font-size: 1.8em;
            }
            .wheel-container { 
                width: 220px; 
                height: 220px; 
                margin: 0 auto 25px auto;
            }
            .wheel-center-btn {
                width: 50px;
                height: 50px;
                font-size: 1.5em;
            }
            .result-content { 
                padding: 20px 15px 20px 15px; 
                margin: 0 10px;
            }
            .token-btn {
                padding: 10px 15px;
                font-size: 0.9em;
                min-width: 90px;
            }
            .play-btn {
                width: 180px !important;
                padding: 14px 30px !important;
                font-size: 1.1em !important;
                margin: 25px auto !important;
            }
            .language-selector {
                top: 10px;
                right: 10px;
            }
            .lang-btn {
                padding: 6px 12px;
                font-size: 12px;
            }
        }
        
        @media (max-height: 700px) {
            .wheel-container {
                width: 200px;
                height: 200px;
            }
            .game-container {
                margin: 5px auto;
            }
        }
    </style>
</head>
<body>
    <div class="language-selector">
        <button class="lang-btn active" data-lang="zh">‰∏≠Êñá</button>
        <button class="lang-btn" data-lang="en">English</button>
    </div>

    <div class="game-container">
        <div class="title" data-i18n="title">üé∞ MAOËΩ¨ÁõòÊ∏∏Êàè</div>
        <div class="desc" data-i18n="desc">50%‰∏≠Â•ñÁéáÔºåÊúÄÈ´òÂèØ‰∏≠10ÂÄçÂ§ßÂ•ñÔºÅ</div>
        <div class="wallet-section" id="walletSection">
            <button class="connect-btn" id="connectBtn" data-i18n="connect">üîó ËøûÊé•Èí±ÂåÖ</button>
            <div class="balance-display" id="balanceDisplay" style="display: none;">
                <div class="balance-item">
                    <div class="balance-label" data-i18n="mao-balance">MAO‰ΩôÈ¢ù</div>
                    <div class="balance-value" id="maoBalance">0</div>
                </div>
                <div class="balance-item">
                    <div class="balance-label" data-i18n="pi-balance">PI‰ΩôÈ¢ù</div>
                    <div class="balance-value" id="piBalance">0</div>
                </div>
            </div>
        </div>
        <div class="game-section" id="gameSection" style="display: none;">
            <div class="token-selector">
                <button class="token-btn active" data-token="MAO">MAO (100)</button>
                <button class="token-btn" data-token="PI">PI (1000)</button>
            </div>
            <div class="wheel-container">
                <div class="wheel-pointer"></div>
                <svg class="svg-wheel" id="svgWheel" viewBox="0 0 270 270"></svg>
                <div class="wheel-center-btn">üé∞</div>
            </div>
            <button class="play-btn" id="playBtn" data-i18n="play">üéÆ ÂºÄÂßãÊ∏∏Êàè</button>
        </div>
    </div>
    <div class="celebration" id="celebration"></div>
    <div class="result-popup" id="resultPopup" style="display:none;">
        <div class="result-content" id="resultContent"></div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
    <script>
        // Â§öËØ≠Ë®ÄÈÖçÁΩÆ
        const TRANSLATIONS = {
            zh: {
                title: 'üé∞ MAOËΩ¨ÁõòÊ∏∏Êàè',
                desc: '50%‰∏≠Â•ñÁéáÔºåÊúÄÈ´òÂèØ‰∏≠10ÂÄçÂ§ßÂ•ñÔºÅ',
                connect: 'üîó ËøûÊé•Èí±ÂåÖ',
                'mao-balance': 'MAO‰ΩôÈ¢ù',
                'pi-balance': 'PI‰ΩôÈ¢ù',
                play: 'üéÆ ÂºÄÂßãÊ∏∏Êàè',
                'connecting': 'ËøûÊé•‰∏≠...',
                'playing': 'Ê∏∏Êàè‰∏≠...',
                'authorizing': 'Á≠âÂæÖÊéàÊùÉ...',
                'processing': 'Âå∫ÂùóÈìæÂ§ÑÁêÜ‰∏≠...',
                'install-wallet': 'ËØ∑ÂÆâË£ÖÊîØÊåÅWeb3ÁöÑÈí±ÂåÖÔºàÂ¶ÇMetaMaskÔºâ',
                'connect-failed': 'ËøûÊé•Èí±ÂåÖÂ§±Ë¥•',
                'insufficient-balance': '‰ΩôÈ¢ù‰∏çË∂≥ÔºÅÈúÄË¶Å',
                'approve-tokens': 'ÈúÄË¶ÅÊéàÊùÉ‰ª£Â∏ÅÔºåËØ∑Âú®Èí±ÂåÖ‰∏≠Á°ÆËÆ§ÔºÅ',
                'approve-success': 'ÊéàÊùÉÊàêÂäüÔºÅÊ≠£Âú®ÂºÄÂßãÊ∏∏Êàè...',
                'game-failed': 'Ê∏∏ÊàèÂ§±Ë¥•',
                'congratulations': 'ÊÅ≠Âñú‰∏≠Â•ñÔºÅ',
                'sorry': 'ÂæàÈÅóÊÜæÔºåÊú™‰∏≠Â•ñ',
                'reward': 'Ëé∑Âæó',
                'segments': {
                    0: { label: 'Ë∞¢Ë∞¢ÊÉ†È°æ' },
                    1: { label: 'Â∞èÂ•ñ' },
                    2: { label: '‰∏≠Â•ñ' },
                    3: { label: 'Â§ßÂ•ñ' },
                    4: { label: 'Ë∂ÖÁ∫ßÂ•ñ' },
                    5: { label: 'ÁªàÊûÅÂ•ñ' }
                }
            },
            en: {
                title: 'üé∞ MAO Wheel Game',
                desc: '50% win rate, up to 10x rewards!',
                connect: 'üîó Connect Wallet',
                'mao-balance': 'MAO Balance',
                'pi-balance': 'PI Balance',
                play: 'üéÆ Play Game',
                'connecting': 'Connecting...',
                'playing': 'Playing...',
                'authorizing': 'Waiting for authorization...',
                'processing': 'Processing on blockchain...',
                'install-wallet': 'Please install a Web3 wallet (like MetaMask)',
                'connect-failed': 'Failed to connect wallet',
                'insufficient-balance': 'Insufficient balance! Need',
                'approve-tokens': 'Need to approve tokens, please confirm in wallet!',
                'approve-success': 'Authorization successful! Starting game...',
                'game-failed': 'Game failed',
                'congratulations': 'Congratulations!',
                'sorry': 'Sorry, no prize',
                'reward': 'Won',
                'segments': {
                    0: { label: 'No Prize' },
                    1: { label: 'Small Prize' },
                    2: { label: 'Medium Prize' },
                    3: { label: 'Big Prize' },
                    4: { label: 'Super Prize' },
                    5: { label: 'Ultimate Prize' }
                }
            }
        };

        // ÂΩìÂâçËØ≠Ë®Ä
        let currentLang = 'zh';

        // Ê∏∏ÊàèÈÖçÁΩÆ
        const CONFIG = {
            ALVEY_NETWORK: {
                chainId: '0xED5',
                chainName: 'AlveyChain Mainnet',
                nativeCurrency: { name: 'Alvey', symbol: 'ALV', decimals: 18 },
                rpcUrls: ['https://elves-core2.alvey.io', 'https://elves-core3.alvey.io', 'https://elves-core1.alvey.io'],
                blockExplorerUrls: ['https://alveyscan.com']
            },
            CONTRACTS: {
                WHEEL_GAME: '0xA9E4FD96B29e4f512a0a75E402C156B04D6E6c35',
                MAO_TOKEN: '0x22f49bcb3dad370a9268ba3fca33cb037ca3d022',
                PI_TOKEN: '0xfd4680e25e05b3435c7f698668d1ce80d2a9f444'
            },
            REWARDS: {
                MAO: [0, 105, 125, 200, 600, 1000],
                PI: [0, 1050, 1250, 2000, 6000, 10000]
            },
            PROBABILITIES: [5000, 7200, 9200, 9900, 9980, 10000],
            COSTS: { MAO: 100, PI: 1000 },
            SEGMENTS: [
                { icon: 'üòÖ', mult: '0x', color: '#6B7280' },
                { icon: 'üéÅ', mult: '1.05x', color: '#F59E0B' },
                { icon: 'üéâ', mult: '1.25x', color: '#EF4444' },
                { icon: 'üí∞', mult: '2x', color: '#8B5CF6' },
                { icon: 'üöÄ', mult: '6x', color: '#10B981' },
                { icon: 'üëë', mult: '10x', color: '#F97316' }
            ]
        };

        let gameState = {
            provider: null, signer: null, contracts: {}, account: null,
            balances: { MAO: 0, PI: 0 }, selectedToken: 'MAO', isSpinning: false
        };

        // Ëé∑ÂèñÁøªËØëÊñáÊú¨
        function t(key) {
            const keys = key.split('.');
            let value = TRANSLATIONS[currentLang];
            for (const k of keys) {
                value = value[k];
                if (!value) break;
            }
            return value || key;
        }

        // Êõ¥Êñ∞ÁïåÈù¢ËØ≠Ë®Ä
        function updateLanguage() {
            document.querySelectorAll('[data-i18n]').forEach(el => {
                const key = el.getAttribute('data-i18n');
                el.textContent = t(key);
            });
            document.title = t('title');
            document.documentElement.lang = currentLang === 'zh' ? 'zh-CN' : 'en';
        }

        // ËØ≠Ë®ÄÂàáÊç¢
        document.querySelectorAll('.lang-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.lang-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                currentLang = btn.dataset.lang;
                updateLanguage();
            });
        });

        // Ëé∑Âèñ DOM ÂÖÉÁ¥†
        const connectBtn = document.getElementById('connectBtn');
        const balanceDisplay = document.getElementById('balanceDisplay');
        const gameSection = document.getElementById('gameSection');
        const maoBalance = document.getElementById('maoBalance');
        const piBalance = document.getElementById('piBalance');
        const playBtn = document.getElementById('playBtn');
        const svgWheel = document.getElementById('svgWheel');
        const resultPopup = document.getElementById('resultPopup');
        const resultContent = document.getElementById('resultContent');
        const celebration = document.getElementById('celebration');
        let currentRotation = 0;

        // Âº∫Âà∂Á°Æ‰øùÊåâÈíÆÂèØËßÅÂíåÂèØÁÇπÂáª
        function ensureButtonVisible() {
            if (playBtn) {
                playBtn.style.display = 'block';
                playBtn.style.opacity = '1';
                playBtn.style.visibility = 'visible';
                playBtn.style.pointerEvents = 'auto';
                playBtn.style.zIndex = '999';
                playBtn.disabled = false;
            }
        }

        // ÊªöÂä®Âà∞ÊåâÈíÆ‰ΩçÁΩÆÁöÑÂáΩÊï∞
        function scrollToButton() {
            if (playBtn) {
                playBtn.scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'center' 
                });
            }
        }

        // Ê∑ªÂä†Ëß¶Êë∏‰∫ã‰ª∂ÊîØÊåÅ
        function addTouchEvents() {
            // ËøûÊé•Èí±ÂåÖÊåâÈíÆ
            connectBtn.addEventListener('touchstart', function(e) {
                e.preventDefault();
                this.style.transform = 'scale(0.95)';
            });
            connectBtn.addEventListener('touchend', function(e) {
                e.preventDefault();
                this.style.transform = 'scale(1)';
                setTimeout(() => connectWallet(), 100);
            });

            // ‰ª£Â∏ÅÈÄâÊã©ÊåâÈíÆ
            document.querySelectorAll('.token-btn').forEach(btn => {
                btn.addEventListener('touchstart', function(e) {
                    e.preventDefault();
                    this.style.transform = 'scale(0.95)';
                });
                btn.addEventListener('touchend', function(e) {
                    e.preventDefault();
                    this.style.transform = 'scale(1)';
                    setTimeout(() => {
                        document.querySelectorAll('.token-btn').forEach(b => b.classList.remove('active'));
                        this.classList.add('active');
                        gameState.selectedToken = this.dataset.token;
                    }, 100);
                });
            });

            // Ê∏∏ÊàèÊåâÈíÆ
            playBtn.addEventListener('touchstart', function(e) {
                e.preventDefault();
                if (!this.disabled) {
                    this.style.transform = 'translateY(-2px) scale(0.95)';
                }
            });
            playBtn.addEventListener('touchend', function(e) {
                e.preventDefault();
                if (!this.disabled) {
                    this.style.transform = 'translateY(-2px) scale(1)';
                    setTimeout(() => playGame(), 100);
                }
            });
        }

        // ÁªòÂà∂ËΩ¨Áõò
        function drawSVGWheel(highlightIdx = -1) {
            const cx = 135, cy = 135, r = 120, n = 6;
            svgWheel.innerHTML = '';
            for (let i = 0; i < n; i++) {
                const startAngle = (i * 60 - 30) * Math.PI / 180;
                const endAngle = ((i + 1) * 60 - 30) * Math.PI / 180;
                const x1 = cx + r * Math.cos(startAngle);
                const y1 = cy + r * Math.sin(startAngle);
                const x2 = cx + r * Math.cos(endAngle);
                const y2 = cy + r * Math.sin(endAngle);
                const largeArc = 0;
                const color = CONFIG.SEGMENTS[i].color;
                const gradId = `grad${i}`;
                const highlight = (i === highlightIdx);
                svgWheel.innerHTML += `
                <defs>
                    <radialGradient id="${gradId}" cx="50%" cy="50%" r="80%">
                        <stop offset="0%" stop-color="#fff" stop-opacity="0.15"/>
                        <stop offset="80%" stop-color="${color}" stop-opacity="1"/>
                    </radialGradient>
                </defs>
                <path d="M${cx},${cy} L${x1},${y1} A${r},${r} 0 ${largeArc} 1 ${x2},${y2} Z"
                    fill="url(#${gradId})"
                    stroke="${highlight ? '#ffe066' : '#fff'}" stroke-width="${highlight ? 7 : 3}" filter="drop-shadow(0 2px 8px #0004)"/>
                `;
                const midAngle = ((i + 0.5) * 60 - 30) * Math.PI / 180;
                const tx = cx + (r - 38) * Math.cos(midAngle);
                const ty = cy + (r - 38) * Math.sin(midAngle);
                svgWheel.innerHTML += `
                    <text x="${tx}" y="${ty}" text-anchor="middle" alignment-baseline="middle" font-size="22" font-weight="bold" fill="#fff" filter="drop-shadow(0 2px 4px #0008)">${CONFIG.SEGMENTS[i].icon}</text>
                    <text x="${tx}" y="${ty + 22}" text-anchor="middle" alignment-baseline="middle" font-size="14" fill="#ffe066" font-weight="bold">${CONFIG.SEGMENTS[i].mult}</text>
                `;
            }
        }

        // ËøûÊé•Èí±ÂåÖ
        async function connectWallet() {
            try {
                console.log('üîó ÂºÄÂßãËøûÊé•Èí±ÂåÖ...');
                if (!window.ethereum) { 
                    alert(t('install-wallet')); 
                    return; 
                }
                
                connectBtn.innerHTML = t('connecting');
                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
                if (accounts.length === 0) throw new Error('Êú™ÈÄâÊã©Ë¥¶Êà∑');
                
                const chainId = await window.ethereum.request({ method: 'eth_chainId' });
                if (chainId !== CONFIG.ALVEY_NETWORK.chainId) await switchNetwork();
                
                gameState.provider = new ethers.providers.Web3Provider(window.ethereum);
                gameState.signer = gameState.provider.getSigner();
                gameState.account = accounts[0];
                
                await initializeContracts();
                await loadBalances();
                updateUI();
                
                console.log('‚úÖ Èí±ÂåÖËøûÊé•ÊàêÂäü');
            } catch (error) {
                console.error('Èí±ÂåÖËøûÊé•Â§±Ë¥•:', error);
                alert(t('connect-failed') + ': ' + error.message);
                connectBtn.innerHTML = t('connect');
            }
        }

        // ÂàáÊç¢ÁΩëÁªú
        async function switchNetwork() {
            try {
                await window.ethereum.request({ 
                    method: 'wallet_switchEthereumChain', 
                    params: [{ chainId: CONFIG.ALVEY_NETWORK.chainId }] 
                });
            } catch (error) {
                if (error.code === 4902) {
                    await window.ethereum.request({ 
                        method: 'wallet_addEthereumChain', 
                        params: [CONFIG.ALVEY_NETWORK] 
                    });
                } else {
                    throw error; 
                }
            }
        }

        // ÂàùÂßãÂåñÂêàÁ∫¶
        async function initializeContracts() {
            const wheelGameABI = [
                "function playMAOGame() external",
                "function playPIGame() external",
                "event GamePlayed(address indexed player, uint8 tokenType, uint256 betAmount, uint256 rewardAmount, uint8 rewardLevel, uint256 randomSeed)"
            ];
            const erc20ABI = [
                "function balanceOf(address owner) view returns (uint256)",
                "function approve(address spender, uint256 amount) returns (bool)",
                "function allowance(address owner, address spender) view returns (uint256)"
            ];
            
            gameState.contracts = {
                wheelGame: new ethers.Contract(CONFIG.CONTRACTS.WHEEL_GAME, wheelGameABI, gameState.signer),
                maoToken: new ethers.Contract(CONFIG.CONTRACTS.MAO_TOKEN, erc20ABI, gameState.signer),
                piToken: new ethers.Contract(CONFIG.CONTRACTS.PI_TOKEN, erc20ABI, gameState.signer)
            };
        }

        // Âä†ËΩΩ‰ΩôÈ¢ù
        async function loadBalances() {
            try {
                const maoBalance = await gameState.contracts.maoToken.balanceOf(gameState.account);
                const piBalance = await gameState.contracts.piToken.balanceOf(gameState.account);
                gameState.balances.MAO = parseFloat(ethers.utils.formatEther(maoBalance));
                gameState.balances.PI = parseFloat(ethers.utils.formatEther(piBalance));
                updateBalanceDisplay();
            } catch (error) {
                console.error('‰ΩôÈ¢ùÂä†ËΩΩÂ§±Ë¥•:', error);
            }
        }

        // Êõ¥Êñ∞UI
        function updateUI() {
            connectBtn.style.display = 'none';
            balanceDisplay.style.display = 'flex';
            gameSection.style.display = 'block';
            ensureButtonVisible();
            // ÊªöÂä®Âà∞Ê∏∏ÊàèÂå∫Âüü
            setTimeout(() => scrollToButton(), 500);
        }

        // Êõ¥Êñ∞‰ΩôÈ¢ùÊòæÁ§∫
        function updateBalanceDisplay() {
            maoBalance.textContent = gameState.balances.MAO.toFixed(2);
            piBalance.textContent = gameState.balances.PI.toFixed(2);
        }

        // Ê∏∏Êàè‰∏ªÂáΩÊï∞
        async function playGame() {
            if (gameState.isSpinning) return;
            
            try {
                const cost = CONFIG.COSTS[gameState.selectedToken];
                const currentBalance = gameState.balances[gameState.selectedToken];
                
                if (currentBalance < cost) { 
                    alert(t('insufficient-balance') + ` ${cost} ${gameState.selectedToken}`); 
                    return;
                }

                gameState.isSpinning = true;
                playBtn.disabled = true;
                playBtn.innerHTML = t('playing');
                
                // Ê£ÄÊü•ÊéàÊùÉ
                const tokenContract = gameState.selectedToken === 'MAO' ? gameState.contracts.maoToken : gameState.contracts.piToken;
                const requiredAmount = ethers.utils.parseEther(cost.toString());
                let allowance = await tokenContract.allowance(gameState.account, CONFIG.CONTRACTS.WHEEL_GAME);
                
                if (allowance.lt(requiredAmount)) {
                    alert(t('approve-tokens'));
                    playBtn.innerHTML = t('authorizing');
                    
                    // ‰ºòÂåñÊéàÊùÉ‰∫§ÊòìÁöÑgasËÆæÁΩÆ
                    const gasLimit = 150000;
                    const gasPrice = await gameState.provider.getGasPrice();
                    
                    const approveTx = await tokenContract.approve(CONFIG.CONTRACTS.WHEEL_GAME, ethers.constants.MaxUint256);
                    await approveTx.wait();
                    alert(t('approve-success'));
                }
                
                // ÂºÄÂßãËΩ¨ÁõòÂä®Áîª
                startWheelAnimation();
                playBtn.innerHTML = t('processing');
                
                // ‰ΩøÁî®ÂêàÁ∫¶ÈªòËÆ§GasËÆæÁΩÆ
                
                // Ë∞ÉÁî®ÂêàÁ∫¶
                const tx = gameState.selectedToken === 'MAO' ? 
                    await gameState.contracts.wheelGame.playMAOGame() : 
                    await gameState.contracts.wheelGame.playPIGame();
                
                const receipt = await tx.wait();
                const gameEvent = receipt.events.find(event => event.event === 'GamePlayed');
                
                if (gameEvent) {
                    const { rewardAmount, rewardLevel } = gameEvent.args;
                    const result = {
                        level: rewardLevel,
                        amount: parseFloat(ethers.utils.formatEther(rewardAmount)),
                        isWin: rewardLevel > 0
                    };
                    
                    stopWheelAt(result.level);
                            
                    setTimeout(() => {
                        showResult(result);
                        if (result.isWin) createCelebration();
                        loadBalances();
                        resetGame();
                    }, 5000); // Ë∞ÉÊï¥‰∏∫5ÁßíÔºåËÆ©ËΩ¨ÁõòÂÆåÂÖ®ÂÅúÊ≠¢ÂêéÂÜçÊòæÁ§∫ÁªìÊûú
                }

            } catch (error) {
                console.error('Ê∏∏ÊàèÂ§±Ë¥•:', error);
                
                // ÊîπËøõÁöÑÈîôËØØÂ§ÑÁêÜ
                let errorMessage = t('game-failed');
                if (error.code === 4001) {
                    errorMessage = 'Áî®Êà∑ÂèñÊ∂à‰∫Ü‰∫§Êòì';
                } else if (error.message.includes('insufficient funds')) {
                    errorMessage = '‰ΩôÈ¢ù‰∏çË∂≥ÊîØ‰ªòGasË¥πÁî®ÔºåËØ∑Á°Æ‰øùÈí±ÂåÖÊúâË∂≥Â§üÁöÑALV';
                } else if (error.message.includes('gas')) {
                    errorMessage = 'GasË¥πÁî®ÈóÆÈ¢òÔºåËØ∑Á®çÂêéÈáçËØï';
                } else if (error.message.includes('nonce')) {
                    errorMessage = '‰∫§ÊòìÈ°∫Â∫èÈîôËØØÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØï';
                } else if (error.message.includes('network')) {
                    errorMessage = 'ÁΩëÁªúËøûÊé•ÈóÆÈ¢òÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúÊàñÂàáÊç¢RPCËäÇÁÇπ';
                } else if (error.message.includes('allowance')) {
                    errorMessage = '‰ª£Â∏ÅÊéàÊùÉ‰∏çË∂≥ÔºåËØ∑ÈáçÊñ∞ÊéàÊùÉ';
                } else if (error.message.includes('prize pool')) {
                    errorMessage = 'Â•ñÊ±†ÊöÇÊó∂‰∏çÂèØÁî®ÔºåËØ∑Á®çÂêéÈáçËØï';
                } else {
                    errorMessage = `‰∫§ÊòìÂ§±Ë¥•: ${error.reason || error.message}`;
                }
                
                alert('‚ùå ' + errorMessage);
                console.log('üîç ÈîôËØØËØ¶ÊÉÖ:', error);
                console.log('üí° Âª∫ËÆÆ: Âà∑Êñ∞È°µÈù¢ÈáçËØïÔºåÊàñÊ£ÄÊü•Èí±ÂåÖËøûÊé•');
                resetGame();
            }
        }

        // ËΩ¨ÁõòÂä®Áîª
        function startWheelAnimation() {
            // ËΩ¨Áõò‰øùÊåÅÈùôÊ≠¢ÔºåÂè™ËÆ©ÊåáÈíàÊóãËΩ¨
            // ÂÖàËÆ©ÊåáÈíàÂø´ÈÄüÊóãËΩ¨Âá†Âúà
            const randomSpins = 5 + Math.random() * 3; // 5-8Âúà
            const baseRotation = randomSpins * 360;
            const pointer = document.querySelector('.wheel-pointer');
            pointer.style.transition = 'transform 3s cubic-bezier(0.25,0.1,0.25,1)';
            pointer.style.transform = `translateX(-50%) rotate(${baseRotation}deg)`;
            currentRotation = baseRotation;
        }

        function stopWheelAt(level) {
            // ËΩ¨ÁõòÂå∫Âüü‰ªé-30Â∫¶ÂºÄÂßãÔºåÊØè‰∏™Âå∫Âüü60Â∫¶
            // Âå∫Âüü0Ôºö-30Â∫¶Âà∞30Â∫¶Ôºå‰∏≠ÂøÉÂú®0Â∫¶
            // Âå∫Âüü1Ôºö30Â∫¶Âà∞90Â∫¶Ôºå‰∏≠ÂøÉÂú®60Â∫¶
            // Âå∫Âüü2Ôºö90Â∫¶Âà∞150Â∫¶Ôºå‰∏≠ÂøÉÂú®120Â∫¶
            // Âå∫Âüü3Ôºö150Â∫¶Âà∞210Â∫¶Ôºå‰∏≠ÂøÉÂú®180Â∫¶
            // Âå∫Âüü4Ôºö210Â∫¶Âà∞270Â∫¶Ôºå‰∏≠ÂøÉÂú®240Â∫¶
            // Âå∫Âüü5Ôºö270Â∫¶Âà∞330Â∫¶Ôºå‰∏≠ÂøÉÂú®300Â∫¶
            
            // ÊåáÈíàË¶ÅÊåáÂêëlevelÂå∫ÂüüÁöÑ‰∏≠ÂøÉ
            // Âå∫Âüü‰∏≠ÂøÉËßíÂ∫¶ = level * 60 Â∫¶
            const targetAngle = level * 60;
            
            // ËÆ°ÁÆóÊúÄÁªàÊóãËΩ¨ËßíÂ∫¶Ôºå‰øùÊåÅ‰πãÂâçÁöÑÊóãËΩ¨ÂúàÊï∞ÔºåÂè™Ë∞ÉÊï¥ÊúÄÁªà‰ΩçÁΩÆ
            const finalRotation = currentRotation - (currentRotation % 360) + targetAngle;
            
            // ÁºìÊÖ¢Á≤æÁ°ÆÂÅúÂú®ÁõÆÊ†á‰ΩçÁΩÆ
            const pointer = document.querySelector('.wheel-pointer');
            pointer.style.transition = 'transform 1.5s cubic-bezier(0.25,0.1,0.25,1)';
            pointer.style.transform = `translateX(-50%) rotate(${finalRotation}deg)`;
            
            // È´ò‰∫Æ‰∏≠Â•ñÂå∫Âüü
            setTimeout(() => drawSVGWheel(level), 1200);
            // ÁßªÈô§È´ò‰∫Æ
            setTimeout(() => drawSVGWheel(-1), 4000);
        }

        // ÊòæÁ§∫ÁªìÊûú
        function showResult(result) {
            const seg = CONFIG.SEGMENTS[result.level];
            const segmentLabel = t(`segments.${result.level}.label`);
            let html = `<div class='result-emoji'>${seg.icon}</div>`;
            if (result.isWin) {
                html += `<div class='result-title'>${t('congratulations')}</div><div class='result-amount'>${t('reward')}${seg.mult}Â•ñÂä±<br>${result.amount} ${gameState.selectedToken}</div>`;
            } else {
                html += `<div class='result-title'>${t('sorry')}</div>`;
            }
            resultContent.innerHTML = html;
            resultPopup.style.display = 'flex';
            setTimeout(() => { resultPopup.style.display = 'none'; }, 2600);
        }

        // Â∫ÜÁ•ùÂä®Áîª
        function createCelebration() {
            for (let i = 0; i < 40; i++) {
                const confetti = document.createElement('div');
                confetti.className = 'confetti';
                confetti.style.left = Math.random() * 100 + '%';
                confetti.style.animationDelay = Math.random() * 2 + 's';
                confetti.style.backgroundColor = ['#ffe066', '#a259ff', '#4f8cff', '#ffb347', '#ff6b6b'][Math.floor(Math.random() * 5)];
                celebration.appendChild(confetti);
                setTimeout(() => { confetti.remove(); }, 2200);
            }
        }

        // ÈáçÁΩÆÊ∏∏Êàè
        function resetGame() {
            gameState.isSpinning = false;
            playBtn.disabled = false;
            playBtn.innerHTML = t('play');
            
            // ÈáçÁΩÆÊåáÈíàÂà∞ÂàùÂßã‰ΩçÁΩÆ
            const pointer = document.querySelector('.wheel-pointer');
            pointer.style.transition = 'transform 0.5s';
            pointer.style.transform = 'translateX(-50%) rotate(0deg)';
            
            ensureButtonVisible();
        }

        // È°µÈù¢Âä†ËΩΩÂàùÂßãÂåñ
        window.addEventListener('load', () => {
            console.log('üöÄ È°µÈù¢Âä†ËΩΩÂÆåÊàê');
            drawSVGWheel();
            ensureButtonVisible();
            addTouchEvents();
            updateLanguage();
            
            // ÂàùÂßãÂåñÊåáÈíà‰ΩçÁΩÆ
            const pointer = document.querySelector('.wheel-pointer');
            if (pointer) {
                pointer.style.transform = 'translateX(-50%) rotate(0deg)';
            }
            
            // ÂÆöÊúüÊ£ÄÊü•ÊåâÈíÆÁä∂ÊÄÅ
            setInterval(ensureButtonVisible, 1000);
            
            // Ëá™Âä®ËøûÊé•Èí±ÂåÖÔºàÂ¶ÇÊûúÂ∑≤ËøûÊé•Ôºâ
            if (window.ethereum && window.ethereum.selectedAddress) {
                setTimeout(connectWallet, 1000);
            }
        });

        // Ê∑ªÂä†Èº†Ê†á‰∫ã‰ª∂‰Ωú‰∏∫Â§áÁî®
        connectBtn.addEventListener('click', connectWallet);
        playBtn.addEventListener('click', playGame);
        
        document.querySelectorAll('.token-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.token-btn').forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                gameState.selectedToken = e.target.dataset.token;
            });
        });
    </script>
</body>
</html> 