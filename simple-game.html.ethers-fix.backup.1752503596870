<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🎰 MAO转盘游戏</title>
    <script src="https://cdn.tailwindcss.com">
        // 📱 页面生命周期管理
        document.addEventListener('DOMContentLoaded', function() {
            console.log('📱 [生命周期] 页面加载完成');
        });
        
        document.addEventListener('visibilitychange', function() {
            if (document.hidden) {
                console.log('📱 [生命周期] 页面隐藏，停止自动刷新');
                stopAutoRefresh();
            } else {
                console.log('📱 [生命周期] 页面显示，启动自动刷新');
                if (gameState.account) {
                    startAutoRefresh();
                    setTimeout(updateBalance, 500);
                }
            }
        });
        
        // 🚨 错误恢复机制
        window.addEventListener('error', function(event) {
            console.error('🚨 [错误恢复] 全局错误:', event.error);
            
            // 如果是余额相关错误，尝试恢复
            if (event.error && event.error.message && 
                (event.error.message.includes('balance') || 
                 event.error.message.includes('provider'))) {
                
                console.log('🔄 [错误恢复] 检测到余额错误，尝试恢复...');
                balanceUpdateInProgress = false;
                setTimeout(() => {
                    if (gameState.account) {
                        updateBalance();
                    }
                }, 3000);
            }
        });
        
        // 🔄 Promise错误恢复
        window.addEventListener('unhandledrejection', function(event) {
            console.error('🚨 [错误恢复] Promise错误:', event.reason);
            event.preventDefault();
            
            balanceUpdateInProgress = false;
            
            // 如果是网络错误，重置状态
            if (event.reason && event.reason.message && 
                event.reason.message.includes('network')) {
                setTimeout(() => {
                    if (gameState.account) {
                        updateBalance();
                    }
                }, 5000);
            }
        });
    
        // 🚨 紧急修复：页面加载时立即修复余额显示
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚨 执行紧急修复...');
            
            // 修复可能的HTML结构问题
            setTimeout(() => {
                try {
                    // 确保MAO余额显示正确
                    const maoBalance = document.getElementById('maoBalance');
                    if (maoBalance && maoBalance.textContent.includes('PI:')) {
                        maoBalance.textContent = '0';
                        console.log('✅ 修复MAO余额显示');
                    }
                    
                    // 确保PI余额显示正确
                    const piBalance = document.getElementById('piBalance');
                    if (piBalance && piBalance.textContent.includes('加载中')) {
                        piBalance.textContent = '0';
                        console.log('✅ 修复PI余额显示');
                    }
                    
                    // 清理可能的重复元素
                    const allElements = document.querySelectorAll('*');
                    allElements.forEach(element => {
                        if (element.textContent && element.textContent.includes('PI: 加载中') && 
                            !element.id.includes('totalBurned')) {
                            element.style.display = 'none';
                            console.log('✅ 隐藏重复的PI加载中元素');
                        }
                    });
                    
                } catch (error) {
                    console.error('❌ 紧急修复失败:', error);
                }
            }, 100);
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
    <style>
        .wheel {
            background: conic-gradient(
                from 0deg,
                #FF6B9D 0deg 208.8deg,    /* 谢谢惠顾 58% */
                #4ECDC4 208.8deg 288deg,  /* 小奖 22% */
                #45B7D1 288deg 331.2deg, /* 中奖 12% */
                #96CEB4 331.2deg 352.8deg, /* 大奖 6% */
                #FFEAA7 352.8deg 358.2deg, /* 超级大奖 1.5% */
                #DDA0DD 358.2deg 360deg  /* 终极大奖 0.5% */
            );
            border: 8px solid #FFD700;
            box-shadow: 0 0 30px rgba(255, 215, 0, 0.6);
        }
        
        .spin-btn {
            background: radial-gradient(circle, #FFD700, #FFA500);
            border: 4px solid white;
            transition: all 0.3s ease;
        }
        
        .spin-btn:hover:not(:disabled) {
            transform: scale(1.1);
            box-shadow: 0 0 20px rgba(255, 215, 0, 0.8);
        }
        
        .spin-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 min-h-screen">
    <div class="container mx-auto px-4 py-6 max-w-lg">
        
        <!-- 标题 -->
        <div class="text-center mb-6">
            <h1 class="text-3xl font-bold text-white mb-2">🎰 MAO转盘游戏</h1>
            <p class="text-blue-200">简单版本 - 专注游戏体验</p>
        </div>

        <!-- 连接状态 -->
        <div class="bg-white/10 rounded-xl p-4 mb-6">
            <div class="text-center">
                <button id="connectBtn" onclick="connectWallet()" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-xl">
                    🔗 连接钱包
                </button>
                <div id="walletInfo" class="mt-3 text-sm text-blue-200" style="display:none;">
                    钱包: <span id="address" class="text-white"></span>
                </div>
            </div>
        </div>

        <!-- 游戏区域 -->
        <div id="gameArea" style="display:none;">
            
            <!-- 代币选择 -->
            <div class="bg-white/10 rounded-xl p-4 mb-4">
                <h3 class="text-white font-bold text-center mb-3">选择代币</h3>
                <div class="flex gap-3">
                    <button id="maoBtn" onclick="selectToken('MAO')" class="flex-1 bg-blue-600 text-white py-2 rounded-lg font-bold">
                        MAO (100)
                    </button>
                    <button id="piBtn" onclick="selectToken('PI')" class="flex-1 bg-gray-600 text-white py-2 rounded-lg font-bold">
                        PI (10,000)
                    </button>
                </div>
            </div>

            <!-- 授权 -->
            <div class="bg-white/10 rounded-xl p-4 mb-4">
                <button id="approveBtn" onclick="approve()" class="w-full bg-orange-600 hover:bg-orange-700 text-white font-bold py-3 rounded-xl">
                    🔓 授权 MAO
                </button>
                <div class="text-center mt-2">
                    <span id="approveStatus" class="text-sm text-blue-200">需要授权才能游戏</span>
                </div>
            </div>

            <!-- 转盘 -->
            <div class="bg-white/10 rounded-xl p-6">
                <div class="text-center">
                    <div class="relative inline-block">
                        <div id="wheel" class="w-56 h-56 rounded-full wheel mx-auto relative">
                            <!-- 指针 -->
                            <div class="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-2">
                                <div class="w-0 h-0 border-l-4 border-r-4 border-b-8 border-transparent border-b-yellow-400"></div>
                            </div>
                            <!-- 中心 -->
                            <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-16 h-16 bg-white rounded-full flex items-center justify-center font-bold text-lg">
                                MAO
                            </div>
                        </div>
                        
                        <!-- 游戏按钮 -->
                        <div class="mt-6">
                            <button id="spinBtn" onclick="spin()" disabled class="spin-btn w-20 h-20 rounded-full text-white font-bold disabled:opacity-50">
                                <div class="text-lg">🎲</div>
                                <div class="text-xs">开始</div>
                            </button>
                        </div>
                    </div>
                    
                    <div class="mt-4">
                        <p id="gameStatus" class="text-white">请连接钱包并授权</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 配置
        const CONTRACTS = {
            WHEEL_GAME: '0xB677DBcA76061E6301272c83179c8243A4eeB6A5',
            MAO_TOKEN: '0x22f49bcb3dad370a9268ba3fca33cb037ca3d022',
            PI_TOKEN: '0xfd4680e25e05b3435c7f698668d1ce80d2a9f444'
        };

        // 全局变量
        let provider, signer, account;
        let selectedToken = 'MAO';
        let contracts = {};
        let isSpinning = false;
        let approvalStatus = { MAO: false, PI: false };

        // ABI
        const WHEEL_ABI = ["function playMAOGame() external", "function playPIGame() external"];
        const TOKEN_ABI = ["function approve(address spender, uint256 amount) returns (bool)", "function allowance(address owner, address spender) view returns (uint256)"];

        // 连接钱包 - 简化版
        
        // 🔥 全新余额更新系统 - 终极版本
        let balanceUpdateInProgress = false;
        let balanceUpdateRetryCount = 0;
        const MAX_BALANCE_RETRIES = 3;
        
        // 余额缓存系统
        const balanceCache = {
            MAO: { value: '0', timestamp: 0, isLoading: false },
            PI: { value: '0', timestamp: 0, isLoading: false }
        };
        
        // 🎯 智能余额更新函数
        async function updateBalance() {
            console.log('🔄 [余额更新] 开始更新余额...');
            
            // 防止重复执行
            if (balanceUpdateInProgress) {
                console.log('⚠️ [余额更新] 已在进行中，跳过');
                return;
            }
            
            balanceUpdateInProgress = true;
            
            try {
                if (!gameState.account || !gameState.provider) {
                    console.log('⚠️ [余额更新] 账户未连接');
                    setBalanceDisplay('MAO', '未连接');
                    setBalanceDisplay('PI', '未连接');
                    return;
                }
                
                console.log('📊 [余额更新] 账户:', gameState.account);
                
                // 并行查询两个代币余额
                const promises = [
                    queryTokenBalance('MAO', CONFIG.CONTRACTS.MAO_TOKEN),
                    queryTokenBalance('PI', CONFIG.CONTRACTS.PI_TOKEN)
                ];
                
                // 设置加载状态
                setBalanceDisplay('MAO', '查询中...');
                setBalanceDisplay('PI', '查询中...');
                
                const results = await Promise.allSettled(promises);
                
                // 处理MAO结果
                if (results[0].status === 'fulfilled') {
                    const maoBalance = results[0].value;
                    balanceCache.MAO = { value: maoBalance, timestamp: Date.now(), isLoading: false };
                    setBalanceDisplay('MAO', maoBalance);
                    console.log('✅ [余额更新] MAO余额:', maoBalance);
                } else {
                    console.error('❌ [余额更新] MAO查询失败:', results[0].reason);
                    setBalanceDisplay('MAO', '查询失败');
                }
                
                // 处理PI结果
                if (results[1].status === 'fulfilled') {
                    const piBalance = results[1].value;
                    balanceCache.PI = { value: piBalance, timestamp: Date.now(), isLoading: false };
                    setBalanceDisplay('PI', piBalance);
                    console.log('✅ [余额更新] PI余额:', piBalance);
                } else {
                    console.error('❌ [余额更新] PI查询失败:', results[1].reason);
                    setBalanceDisplay('PI', '查询失败');
                }
                
                balanceUpdateRetryCount = 0; // 重置重试计数
                
            } catch (error) {
                console.error('❌ [余额更新] 整体失败:', error);
                
                balanceUpdateRetryCount++;
                if (balanceUpdateRetryCount < MAX_BALANCE_RETRIES) {
                    console.log(`🔄 [余额更新] ${balanceUpdateRetryCount}/${MAX_BALANCE_RETRIES} 次重试...`);
                    setTimeout(() => {
                        balanceUpdateInProgress = false;
                        updateBalance();
                    }, 2000);
                    return;
                } else {
                    setBalanceDisplay('MAO', '重试失败');
                    setBalanceDisplay('PI', '重试失败');
                }
            } finally {
                balanceUpdateInProgress = false;
            }
        }
        
        // 🎯 查询单个代币余额
        async function queryTokenBalance(tokenName, contractAddress) {
            console.log(`📊 [余额查询] 查询${tokenName}余额...`);
            
            try {
                const contract = new ethers.Contract(
                    contractAddress,
                    ["function balanceOf(address owner) view returns (uint256)"],
                    gameState.provider
                );
                
                const balanceWei = await contract.balanceOf(gameState.account);
                const balance = parseFloat(ethers.formatEther(balanceWei)).toFixed(2);
                
                console.log(`✅ [余额查询] ${tokenName}余额查询成功: ${balance}`);
                return balance;
                
            } catch (error) {
                console.error(`❌ [余额查询] ${tokenName}余额查询失败:`, error);
                throw error;
            }
        }
        
        // 🎯 设置余额显示
        function setBalanceDisplay(tokenName, value) {
            try {
                console.log(`🖼️ [显示更新] 更新${tokenName}显示: ${value}`);
                
                // 多种选择器策略
                const selectors = [
                    `#${tokenName.toLowerCase()}Balance`,
                    `.${tokenName.toLowerCase()}-balance`,
                    `[data-token="${tokenName}"]`,
                    `#${tokenName}Amount`,
                    `.balance-${tokenName.toLowerCase()}`
                ];
                
                let found = false;
                
                for (const selector of selectors) {
                    const elements = document.querySelectorAll(selector);
                    if (elements.length > 0) {
                        elements.forEach(element => {
                            element.textContent = value;
                            found = true;
                        });
                    }
                }
                
                // 智能文本搜索更新
                if (!found) {
                    const allElements = document.querySelectorAll('*');
                    for (const element of allElements) {
                        if (element.textContent) {
                            // 匹配 "MAO余额" 或 "PI余额" 或 "MAO: xxx" 或 "PI: xxx"
                            const patterns = [
                                new RegExp(`${tokenName}余额[\s\S]*?$`),
                                new RegExp(`${tokenName}:[^\n]*$`),
                                new RegExp(`${tokenName}[\s]*加载中`),
                                new RegExp(`${tokenName}[\s]*查询中`)
                            ];
                            
                            for (const pattern of patterns) {
                                if (pattern.test(element.textContent)) {
                                    // 找到包含余额信息的元素
                                    const parent = element.closest('div, span, p');
                                    if (parent) {
                                        // 查找数值显示区域
                                        const valueElements = parent.querySelectorAll('.balance-amount, .amount, .value, .number');
                                        if (valueElements.length > 0) {
                                            valueElements[0].textContent = value;
                                            found = true;
                                            break;
                                        } else {
                                            // 直接替换文本内容
                                            element.textContent = element.textContent.replace(
                                                /(加载中|查询中|查询失败|未连接|重试失败)[\d\.]*/, 
                                                value
                                            );
                                            found = true;
                                            break;
                                        }
                                    }
                                }
                            }
                            if (found) break;
                        }
                    }
                }
                
                if (found) {
                    console.log(`✅ [显示更新] ${tokenName}显示更新成功`);
                } else {
                    console.log(`⚠️ [显示更新] 未找到${tokenName}显示元素`);
                }
                
            } catch (error) {
                console.error(`❌ [显示更新] ${tokenName}显示更新失败:`, error);
            }
        }
        
        // 🔄 自动刷新机制
        let autoRefreshInterval;
        
        function startAutoRefresh() {
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
            }
            
            autoRefreshInterval = setInterval(() => {
                if (gameState.account && gameState.provider && !balanceUpdateInProgress) {
                    console.log('🔄 [自动刷新] 定时更新余额...');
                    updateBalance();
                }
            }, 15000); // 每15秒自动刷新
        }
        
        function stopAutoRefresh() {
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
                autoRefreshInterval = null;
            }
        }
        async function connectWallet() {
            try {
                const btn = document.getElementById('connectBtn');
                btn.textContent = '连接中...';
                btn.disabled = true;

                if (!window.ethereum) {
                    alert('请使用Web3钱包！\n推荐：TP钱包、Trust Wallet、MetaMask');
                    resetConnectButton();
                    return;
                }

                // 请求连接
                const accounts = await window.ethereum.request({
                    method: 'eth_requestAccounts'
                });

                if (!accounts.length) {
                    throw new Error('没有账户');
                }

                account = accounts[0];
                provider = new ethers.providers.Web3Provider(window.ethereum);
                signer = provider.getSigner();

                // 检查网络
                const network = await provider.getNetwork();
                if (network.chainId !== 3797) {
                    await switchNetwork();
                }

                // 初始化合约
                contracts = {
                    wheel: new ethers.Contract(CONTRACTS.WHEEL_GAME, WHEEL_ABI, signer),
                    mao: new ethers.Contract(CONTRACTS.MAO_TOKEN, TOKEN_ABI, signer),
                    pi: new ethers.Contract(CONTRACTS.PI_TOKEN, TOKEN_ABI, signer)
                };

                // 显示连接成功
                document.getElementById('address').textContent = account.slice(0, 8) + '...';
                document.getElementById('walletInfo').style.display = 'block';
                document.getElementById('gameArea').style.display = 'block';
                btn.style.display = 'none';

                // 检查授权
                await checkApproval();

                console.log('✅ 连接成功');

            } catch (error) {
                console.error('连接失败:', error);
                alert('连接失败: ' + error.message);
                resetConnectButton();
            }
        }

        // 重置连接按钮
        function resetConnectButton() {
            const btn = document.getElementById('connectBtn');
            btn.textContent = '🔗 连接钱包';
            btn.disabled = false;
        }

        // 切换网络
        async function switchNetwork() {
            try {
                await window.ethereum.request({
                    method: 'wallet_switchEthereumChain',
                    params: [{ chainId: '0xED5' }]
                });
            } catch (error) {
                if (error.code === 4902) {
                    await window.ethereum.request({
                        method: 'wallet_addEthereumChain',
                        params: [{
                            chainId: '0xED5',
                            chainName: 'AlveyChain Mainnet',
                            nativeCurrency: { name: 'ALV', symbol: 'ALV', decimals: 18 },
                            rpcUrls: ['https://elves-core1.alvey.io'],
                            blockExplorerUrls: ['https://alveyscan.com']
                        }]
                    });
                }
            }
        }

        // 选择代币
        function selectToken(token) {
            selectedToken = token;
            
            // 更新按钮
            document.getElementById('maoBtn').className = token === 'MAO' ? 
                'flex-1 bg-blue-600 text-white py-2 rounded-lg font-bold' : 
                'flex-1 bg-gray-600 text-white py-2 rounded-lg font-bold';
            document.getElementById('piBtn').className = token === 'PI' ? 
                'flex-1 bg-purple-600 text-white py-2 rounded-lg font-bold' : 
                'flex-1 bg-gray-600 text-white py-2 rounded-lg font-bold';

            // 更新授权按钮
            document.getElementById('approveBtn').innerHTML = `🔓 授权 ${token}`;
            
            // 更新转盘中心显示
            document.querySelector('#wheel .absolute.top-1\\/2').textContent = token;
            
            // 重新检查授权
            if (contracts.mao && contracts.pi) {
                checkApproval();
            }
        }

        // 检查授权
        async function checkApproval() {
            try {
                const contract = selectedToken === 'MAO' ? contracts.mao : contracts.pi;
                const allowance = await contract.allowance(account, CONTRACTS.WHEEL_GAME);
                
                const required = selectedToken === 'MAO' ? 
                    ethers.utils.parseUnits('100', 18) : 
                    ethers.utils.parseUnits('10000', 18);

                const approved = allowance.gte(required);
                approvalStatus[selectedToken] = approved;
                
                updateApprovalStatus(approved);

            } catch (error) {
                console.error('检查授权失败:', error);
                approvalStatus[selectedToken] = false;
                updateApprovalStatus(false);
            }
        }

        // 更新授权状态
        function updateApprovalStatus(approved) {
            const approveBtn = document.getElementById('approveBtn');
            const spinBtn = document.getElementById('spinBtn');
            const status = document.getElementById('approveStatus');
            const gameStatus = document.getElementById('gameStatus');

            if (approved) {
                approveBtn.textContent = `✅ ${selectedToken} 已授权`;
                approveBtn.disabled = true;
                approveBtn.className = 'w-full bg-green-600 text-white font-bold py-3 rounded-xl cursor-not-allowed';
                
                spinBtn.disabled = false;
                spinBtn.className = 'spin-btn w-20 h-20 rounded-full text-white font-bold';
                status.textContent = '✅ 已授权，可以游戏';
                gameStatus.textContent = '🎯 点击开始游戏！';
            } else {
                approveBtn.textContent = `🔓 授权 ${selectedToken}`;
                approveBtn.disabled = false;
                approveBtn.className = 'w-full bg-orange-600 hover:bg-orange-700 text-white font-bold py-3 rounded-xl';
                
                spinBtn.disabled = true;
                spinBtn.className = 'spin-btn w-20 h-20 rounded-full text-white font-bold disabled:opacity-50';
                status.textContent = '❌ 需要授权';
                gameStatus.textContent = '请先授权代币';
            }
        }

        // 授权
        async function approve() {
            try {
                const btn = document.getElementById('approveBtn');
                const originalText = btn.textContent;
                btn.textContent = '授权中...';
                btn.disabled = true;

                const contract = selectedToken === 'MAO' ? contracts.mao : contracts.pi;
                const tx = await contract.approve(CONTRACTS.WHEEL_GAME, ethers.constants.MaxUint256);
                
                document.getElementById('approveStatus').textContent = '⏳ 等待确认...';
                await tx.wait();

                alert(`${selectedToken} 授权成功！现在可以开始游戏了！`);
                await checkApproval();

            } catch (error) {
                console.error('授权失败:', error);
                alert('授权失败: ' + error.message);
                // 恢复按钮状态
                const btn = document.getElementById('approveBtn');
                btn.textContent = `🔓 授权 ${selectedToken}`;
                btn.disabled = false;
                btn.className = 'w-full bg-orange-600 hover:bg-orange-700 text-white font-bold py-3 rounded-xl';
            }
        }

        // 开始游戏
        async function spin() {
            if (isSpinning) return;

            try {
                // 检查授权状态
                if (!approvalStatus[selectedToken]) {
                    alert('请先授权代币！');
                    return;
                }

                isSpinning = true;
                const wheel = document.getElementById('wheel');
                const btn = document.getElementById('spinBtn');
                const status = document.getElementById('gameStatus');

                // 按钮状态
                btn.innerHTML = '<div class="text-lg">⏳</div><div class="text-xs">游戏中</div>';
                btn.disabled = true;
                status.textContent = '🎰 转盘旋转中...';

                // 转盘动画
                const rotation = 1800 + Math.random() * 1800;
                wheel.style.transition = 'transform 3s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
                wheel.style.transform = `rotate(${rotation}deg)`;

                // 调用合约
                const method = selectedToken === 'MAO' ? 'playMAOGame' : 'playPIGame';
                const tx = await contracts.wheel[method]();

                status.textContent = '⏳ 等待区块确认...';
                const receipt = await tx.wait();

                // 游戏完成
                alert('🎉 游戏完成！请查看您的钱包余额变化。');
                status.textContent = '🎯 游戏完成，可以继续！';

                console.log('游戏完成:', receipt.transactionHash);

            } catch (error) {
                console.error('游戏失败:', error);
                let errorMsg = '游戏失败: ';
                if (error.message.includes('insufficient funds')) {
                    errorMsg += '代币余额不足';
                } else if (error.message.includes('user rejected')) {
                    errorMsg += '用户取消交易';
                } else {
                    errorMsg += error.message;
                }
                alert(errorMsg);
            } finally {
                isSpinning = false;
                // 恢复按钮状态 - 检查授权状态
                if (approvalStatus[selectedToken]) {
                    const btn = document.getElementById('spinBtn');
                    btn.innerHTML = '<div class="text-lg">🎲</div><div class="text-xs">开始</div>';
                    btn.disabled = false;
                    btn.className = 'spin-btn w-20 h-20 rounded-full text-white font-bold';
                    if (document.getElementById('gameStatus').textContent.includes('游戏中') || document.getElementById('gameStatus').textContent.includes('等待')) {
                        document.getElementById('gameStatus').textContent = '🎯 点击开始游戏！';
                    }
                } else {
                    // 如果授权状态有问题，重新检查
                    await checkApproval();
                }
            }
        }

        // 监听账户变化
        if (window.ethereum) {
            window.ethereum.on('accountsChanged', (accounts) => {
                if (accounts.length === 0) {
                    location.reload();
                } else if (accounts[0] !== account) {
                    location.reload();
                }
            });

            window.ethereum.on('chainChanged', () => {
                location.reload();
            });
        }

        // 页面加载完成后检查是否已连接
        window.addEventListener('load', async () => {
            if (window.ethereum) {
                try {
                    const accounts = await window.ethereum.request({ method: 'eth_accounts' });
                    if (accounts.length > 0) {
                        // 检测到已连接的账户，自动连接
                        setTimeout(connectWallet, 500);
                    }
                } catch (error) {
                    console.log('自动连接检查失败:', error);
                }
            }
        });
    </script>

    <!-- 🔥 销毁总量显示 -->
    <div class="burn-total-display" style="
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: linear-gradient(135deg, #ff4757, #ffa726);
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: bold;
        box-shadow: 0 4px 15px rgba(255, 71, 87, 0.3);
        backdrop-filter: blur(10px);
        z-index: 1000;
        display: flex;
        gap: 10px;
        align-items: center;
        border: 1px solid rgba(255, 255, 255, 0.2);
    ">
        <div style="display: flex; align-items: center; gap: 4px;">
            <span>🔥</span>
            <span>总销毁</span>
        </div>
        <div style="display: flex; gap: 8px; font-size: 11px;">
            <div>
                <span style="color: #ffeb3b;">MAO:</span>
                <span id="totalBurnedMAO" style="color: white; font-weight: bold;">加载中...</span>
            </div>
            <div>
                <span style="color: #ffeb3b;">PI:</span>
                <span id="totalBurnedPI" style="color: white; font-weight: bold;">加载中...</span>
            </div>
        </div>
    </div>
</body>
</html> 